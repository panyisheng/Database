-- MySQL Script generated by MySQL Workbench
-- Wed Nov  1 20:42:23 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`saller`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`saller` ;

CREATE TABLE IF NOT EXISTS `mydb`.`saller` (
  `account` VARCHAR(16) NOT NULL,
  `password` VARCHAR(16) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `telephone` CHAR(8) NOT NULL,
  `age` SMALLINT NOT NULL,
  `sex` ENUM('男', '女') NOT NULL,
  PRIMARY KEY (`account`))
ENGINE = InnoDB;

DELIMITER $
DROP TRIGGER if exists `insert_check` $

CREATE TRIGGER `insert_check` 
BEFORE INSERT ON `mydb`.`saller`
FOR EACH ROW
BEGIN
	IF NEW.age NOT BETWEEN 0 AND 80 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'age should be between 0 and 80';
		
        ELSEIF NEW.telephone NOT RLIKE '[0-9]{8}' THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'telephone should be 8 digit';
	END IF;
END$

DELIMITER ;


-- -----------------------------------------------------
-- Table `mydb`.`goods`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`goods` ;

CREATE TABLE IF NOT EXISTS `mydb`.`goods` (
  `goodsid` CHAR(16) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `type` BINARY(4) NOT NULL,
  PRIMARY KEY (`goodsid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`store`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`store` ;

CREATE TABLE IF NOT EXISTS `mydb`.`store` (
  `saller_account` VARCHAR(16) NOT NULL,
  `goods_goodsid` CHAR(16) NOT NULL,
  `price` SMALLINT NOT NULL,
  `discount1` DOUBLE NOT NULL,
  `remainings` SMALLINT NOT NULL,
  `production date` DATETIME NOT NULL,
  `shelf date` DATETIME NOT NULL,
  PRIMARY KEY (`saller_account`, `goods_goodsid`),
  INDEX `fk_saller_has_goods_goods1_idx` (`goods_goodsid` ASC),
  INDEX `fk_saller_has_goods_saller_idx` (`saller_account` ASC),
  CONSTRAINT `fk_saller_has_goods_saller`
    FOREIGN KEY (`saller_account`)
    REFERENCES `mydb`.`saller` (`account`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_saller_has_goods_goods1`
    FOREIGN KEY (`goods_goodsid`)
    REFERENCES `mydb`.`goods` (`goodsid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


DELIMITER $
DROP TRIGGER IF EXISTS `mydb`.`store_check` $

CREATE TRIGGER `mydb`.`store_check` 
BEFORE INSERT ON `mydb`.`store`
FOR EACH ROW
BEGIN
	IF NEW.price <=0 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'price should be positive integer';
	ELSEIF NEW.discount1 NOT BETWEEN 0.00 and 1.00 THEN 
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'discount1 should between 0 and 1';
	ELSEIF NEW.remainings <=0 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'remainings should be postive integer';
	END IF;
END$
DELIMITER ;


-- -----------------------------------------------------
-- Table `mydb`.`customer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`customer` ;

CREATE TABLE IF NOT EXISTS `mydb`.`customer` (
  `account` VARCHAR(16) NOT NULL,
  `password` VARCHAR(16) NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `telephone` CHAR(8) NOT NULL,
  `age` SMALLINT NOT NULL,
  `sex` ENUM('男', '女') NOT NULL,
  `totalpoint` SMALLINT,
  `ismember` SMALLINT NOT NULL,
  PRIMARY KEY (`account`))
ENGINE = InnoDB;

DELIMITER $
DROP TRIGGER IF EXISTS `mydb`.`customer_check`$

CREATE TRIGGER `mydb`.`customer_check`
BEFORE INSERT ON `mydb`.`customer`
FOR EACH ROW
BEGIN 
	IF NEW.age NOT BETWEEN 0 AND 80 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'age should be between 0 and 80';
		
        ELSEIF NEW.telephone NOT RLIKE '[0-9]{8}' THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'telephone should be 8 digit';
		ELSEIF NOT ((NEW.ismember = 1 AND NEW.totalpoint IS NOT NULL) OR (NEW.ismember = 0 AND NEW.totalpoint IS NULL)) THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'membership is not consistent with totalpoint';
    
    END IF;
END$
DELIMITER ;

DELIMITER $
DROP TRIGGER IF EXISTS `mydb`.`auto_insert_rank_discount`$

CREATE TRIGGER  `mydb`.`auto_insert_rank_discount`
AFTER INSERT ON `mydb`.`customer`
FOR EACH ROW
BEGIN
	IF (NEW.ismember =1 AND NEW.totalpoint BETWEEN 0 AND 100 ) THEN 
		INSERT INTO myrank VALUES('普通会员',NEW.`account`);
        INSERT INTO mydiscount VALUES(0.9,NEW.`account`);
	ELSEIF (NEW.ismember =1 AND NEW.totalpoint BETWEEN 101 AND 500) THEN
		INSERT INTO myrank VALUES('黄金会员',NEW.`account`);
        INSERT INTO mydiscount VALUES(0.8,NEW.`account`);
	ELSEIF (NEW.ismember =1 AND NEW.totalpoint >500) THEN
		INSERT INTO myrank VALUES('铂金会员',NEW.`account`);
        INSERT INTO mydiscount VALUES(0.7,NEW.`account`);
	ELSEIF (NEW.ismember = 0 AND NEW.totalpoint IS NULL) THEN 
		INSERT INTO myrank VALUES('非会员',NEW.`account`);
	END IF;
END$
DELIMITER ;

DELIMITER $
DROP TRIGGER IF EXISTS `mydb`.`auto_update_rank_discount`$

CREATE TRIGGER  `mydb`.`auto_update_rank_discount`
AFTER UPDATE ON `mydb`.`customer`
FOR EACH ROW
BEGIN 
	IF (NEW.ismember =1 AND NEW.totalpoint BETWEEN 0 AND 100 ) THEN 
		UPDATE myrank SET rank = '普通会员' WHERE myrank.customer_account = NEW.account;
        UPDATE mydiscount SET discount = 0.9 WHERE mydiscount.customer_account = NEW.account;
	ELSEIF (NEW.ismember =1 AND NEW.totalpoint BETWEEN 101 AND 500) THEN
		UPDATE myrank SET rank = '黄金会员' WHERE myrank.customer_account = NEW.account;
        UPDATE mydiscount SET discount = 0.8 WHERE mydiscount.customer_account = NEW.account;
	ELSEIF (NEW.ismember =1 AND NEW.totalpoint >500) THEN
		UPDATE myrank SET rank = '铂金会员' WHERE myrank.customer_account = NEW.account;
        UPDATE mydiscount SET discount = 0.7 WHERE mydiscount.customer_account = NEW.account;
	ELSEIF (NEW.ismember = 0 AND NEW.totalpoint IS NULL) THEN 
		UPDATE myrank SET rank = '非会员' WHERE myrank.customer_account = NEW.account;

	END IF;
END$

DELIMITER ;
-- -----------------------------------------------------
-- Table `mydb`.`myrank`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`myrank` ;

CREATE TABLE IF NOT EXISTS `mydb`.`myrank` (
  `rank` ENUM('铂金会员', '黄金会员', '普通会员', '非会员') NOT NULL,
  `customer_account` VARCHAR(16) NOT NULL,
  PRIMARY KEY (`customer_account`),
  CONSTRAINT `fk_crank_customer1`
    FOREIGN KEY (`customer_account`)
    REFERENCES `mydb`.`customer` (`account`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`mydiscount`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`mydiscount` ;

CREATE TABLE IF NOT EXISTS `mydb`.`mydiscount` (
  `discount` DOUBLE NOT NULL,
  `customer_account` VARCHAR(16) NOT NULL,
  PRIMARY KEY (`customer_account`),
  CONSTRAINT `fk_mydiscount_customer1`
    FOREIGN KEY (`customer_account`)
    REFERENCES `mydb`.`customer` (`account`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

DELIMITER $
DROP TRIGGER IF EXISTS `mydb`.`mydiscount_check`$

CREATE TRIGGER `mydb`.`mydiscount_check`
BEFORE INSERT ON `mydb`.`mydiscount`
FOR EACH ROW
BEGIN
	IF NEW.discount NOT BETWEEN 0.00 AND 1.00 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'discount should between 0 and 1';
	END IF;
END$
DELIMITER ;
-- -----------------------------------------------------
-- Table `mydb`.`ORDERINGS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`ORDERINGS` ;

CREATE TABLE IF NOT EXISTS `mydb`.`ORDERINGS` (
  `orderid` CHAR(16) NOT NULL,
  `totalprice` DOUBLE NOT NULL ,
  `order date` DATETIME NOT NULL,
  `delivery date` DATETIME ,
  `order_state` CHAR(3) ,
  `post code` CHAR(6) NOT NULL,
  `address` VARCHAR(45) NOT NULL,
  `order point` SMALLINT ,
  `comment` VARCHAR(200) ,
  `comment date` DATETIME ,
  `comment score` REAL ,
  `back reason` VARCHAR(200) ,
  `customer_account` VARCHAR(16) NOT NULL,
  PRIMARY KEY (`orderid`),
  INDEX `fk_ORDERINGS_customer1_idx` (`customer_account` ASC),
  CONSTRAINT `fk_ORDERINGS_customer1`
    FOREIGN KEY (`customer_account`)
    REFERENCES `mydb`.`customer` (`account`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

DELIMITER $
DROP TRIGGER IF EXISTS `mydb`.`ORDERINGS_check`$

CREATE TRIGGER `mydb`.`ORDERINGS_check` 
BEFORE INSERT ON `mydb`.`ORDERINGS`
FOR EACH ROW
BEGIN
	IF NEW.`order_state` NOT IN ('未处理','已发货','已备货 ','已完成','已退货') THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'unknown order_state';
	ELSEIF NEW.`post code` NOT RLIKE '[0-9]{6}' THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'post code should be 6 digit';
	ELSEIF NEW.`order point`IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'order point inserted should be null';
	ELSEIF NEW.`comment score` IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'comment score inserted should be null';
	ELSEIF NEW.`comment` IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'comment inerted should be null';
	ELSEIF NEW.`comment date` IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'comment date inserted should be null';
	ELSEIF NEW.`back reason` IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'back reason inserted should be null';
	ELSEIF NEW.`totalprice` != 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'total price inserted should be 0';
	ELSEIF NEW.`order_state` IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'order_state inserted should be null';
	ELSEIF NEW.`delivery date` IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'comment date inserted should be null';
	END IF;
END$
DELIMITER ;

DELIMITER $
DROP TRIGGER IF EXISTS `mydb`.`update_state`$

CREATE TRIGGER `mydb`.`update_state`
BEFORE UPDATE ON `mydb`.`ORDERINGS`
FOR EACH ROW
BEGIN
	IF(NEW.`order_state` != '已完成' AND (NEW.`comment` IS NOT NULL OR NEW.`comment date` IS NOT NULL OR NEW.`comment score` IS NOT NULL)) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'you can not comment at this order_state';
	ELSEIF(NEW.`order_state` = '已完成' AND (NEW.`comment score` NOT BETWEEN 0.00 and 5.00)) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'comment score should between 0 and 5';
	ELSEIF(NEW.`order_state`!= '已退货' AND NEW.`back reason` IS NOT NULL) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'you can only write back reason at this state ';
	ELSEIF((NEW.`order_state`= '未处理' or NEW.`order_state`= '已备货')AND NEW.`delivery date` IS NOT NULL) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'delivery date should be null at this state ';
	END IF;
END$
DELIMITER ;

DELIMITER $
DROP TRIGGER IF EXISTS `mydb`.`back_recover`$

CREATE TRIGGER  `mydb`.`back_recover`
BEFORE UPDATE ON `mydb`.`ORDERINGS`
FOR EACH ROW
BEGIN 
    IF (OLD.`order_state` !='已退货' and NEW.`order_state`='已退货' ) THEN
		UPDATE  store 
        SET remainings = remainings + (SELECT quantity FROM `ORDERINGS CONTENT` WHERE store.goods_goodsid = `ORDERINGS CONTENT`.store_goods_goodsid AND `ORDERINGS CONTENT`.ORDERINGS_orderid = OLD.orderid  )
		WHERE goods_goodsid IN (SELECT goods_goodsid FROM `ORDERINGS CONTENT` WHERE  `ORDERINGS CONTENT`.ORDERINGS_orderid = OLD.orderid );
	END IF;
    
    IF (OLD.`order_state` = '已完成' AND NEW.`order_state` = '已退货' ) THEN
		UPDATE customer
        SET totalpoint = totalpoint - (SELECT `order point` FROM ORDERINGS WHERE orderid = OLD.orderid)
        where `account`  = OLD.customer_account AND ismember = 1;
    END IF;
END $
DELIMITER ;

DELIMITER $
DROP TRIGGER IF EXISTS `mydb`.`add-point`$

CREATE TRIGGER  `mydb`.`add-point`
AFTER UPDATE ON `mydb`.`ORDERINGS`
FOR EACH ROW
BEGIN
	IF(OLD.order_state not like '已完成' AND NEW.order_state like '已完成') THEN
    
		UPDATE customer
        SET totalpoint = totalpoint + (SELECT `order point` FROM ORDERINGS WHERE orderid = OLD.orderid)
        where account  = OLD.customer_account AND ismember = 1;
    
	END IF;
END $
DELIMITER ;

-- -----------------------------------------------------
-- Table `mydb`.`ORDERINGS CONTENT`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`ORDERINGS CONTENT` ;

CREATE TABLE IF NOT EXISTS `mydb`.`ORDERINGS CONTENT` (
  `ORDERINGS_orderid` CHAR(16) NOT NULL,
  `store_saller_account` VARCHAR(16) NOT NULL,
  `store_goods_goodsid` CHAR(16) NOT NULL,
  `quantity` SMALLINT NOT NULL,
  PRIMARY KEY (`ORDERINGS_orderid`, `store_saller_account`, `store_goods_goodsid`),
  INDEX `fk_ORDERINGS_has_store_store1_idx` (`store_saller_account` ASC, `store_goods_goodsid` ASC),
  INDEX `fk_ORDERINGS_has_store_ORDERINGS1_idx` (`ORDERINGS_orderid` ASC),
  CONSTRAINT `fk_ORDERINGS_has_store_ORDERINGS1`
    FOREIGN KEY (`ORDERINGS_orderid`)
    REFERENCES `mydb`.`ORDERINGS` (`orderid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ORDERINGS_has_store_store1`
    FOREIGN KEY (`store_saller_account` , `store_goods_goodsid`)
    REFERENCES `mydb`.`store` (`saller_account` , `goods_goodsid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

DELIMITER $
DROP TRIGGER IF EXISTS `mydb`.`CONTENT_check`$

CREATE TRIGGER `mydb`.`CONTENT_check`
BEFORE INSERT ON `mydb`.`ORDERINGS CONTENT`
FOR EACH ROW
BEGIN
	IF NEW.quantity <= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'goods quantity should be positive integer';
	END IF;
    
    IF NEW.quantity > (SELECT remainings FROM store WHERE saller_account = NEW.store_saller_account AND goods_goodsid = NEW.store_goods_goodsid) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'goods quantity should be less than store remainings';
	END IF;
END $
DELIMITER ;

DELIMITER $
DROP TRIGGER IF EXISTS `mydb`.`auto_updte_order_store`$

CREATE TRIGGER `mydb`.`auto_updte_order_store`
BEFORE INSERT ON `mydb`.`ORDERINGS CONTENT`
FOR EACH ROW
BEGIN
    DECLARE x varchar(16);
    
    UPDATE  ORDERINGS SET `order_state` = '未处理' WHERE `orderid` = NEW.`ORDERINGS_orderid`;
    
    SET x = (SELECT DISTINCT customer_account FROM ORDERINGS WHERE orderid = NEW.`ORDERINGS_orderid`);
    
    IF (((SELECT ismember FROM customer WHERE `account` = x) = 1) AND ((SELECT totalpoint FROM customer WHERE `account` = x) BETWEEN 0 AND 100) ) THEN
     UPDATE ORDERINGS SET totalprice = totalprice + NEW.quantity*(SELECT discount1*price FROM store WHERE goods_goodsid = NEW.store_goods_goodsid AND saller_account = NEW.store_saller_account)*0.9
	 WHERE orderid = NEW.`ORDERINGS_orderid`;
     
     UPDATE store SET remainings = remainings - NEW.quantity WHERE store.goods_goodsid = NEW.store_goods_goodsid AND store.saller_account = NEW.store_saller_account;
    END IF; 
     
     IF (((SELECT ismember FROM customer WHERE `account` = x) = 1) AND ((SELECT totalpoint FROM customer WHERE `account` = x) BETWEEN 101 AND 500) ) THEN
     UPDATE ORDERINGS SET totalprice = totalprice + NEW.quantity*(SELECT discount1*price FROM store WHERE goods_goodsid = NEW.store_goods_goodsid AND saller_account = NEW.store_saller_account)*0.8
	 WHERE orderid = NEW.`ORDERINGS_orderid`;
    
    UPDATE store SET remainings = remainings - NEW.quantity WHERE store.goods_goodsid = NEW.store_goods_goodsid AND store.saller_account = NEW.store_saller_account;
    END IF;
    
    IF (((SELECT ismember FROM customer WHERE `account` = x) = 1) AND ((SELECT totalpoint FROM customer WHERE `account` = x) >500) ) THEN
     UPDATE ORDERINGS SET totalprice = totalprice + NEW.quantity*(SELECT discount1*price FROM store WHERE goods_goodsid = NEW.store_goods_goodsid AND saller_account = NEW.store_saller_account)*0.7
	 WHERE orderid = NEW.`ORDERINGS_orderid`;
    
    UPDATE store SET remainings = remainings - NEW.quantity WHERE store.goods_goodsid = NEW.store_goods_goodsid AND store.saller_account = NEW.store_saller_account;
    END IF;
    
    IF (((SELECT ismember FROM customer WHERE `account` = x) = 0) AND ((SELECT totalpoint FROM customer WHERE `account` = x) IS NULL) ) THEN
     UPDATE ORDERINGS SET totalprice = totalprice + NEW.quantity*(SELECT discount1*price FROM store WHERE goods_goodsid = NEW.store_goods_goodsid AND saller_account = NEW.store_saller_account)
	 WHERE orderid = NEW.`ORDERINGS_orderid`;
    
    UPDATE store SET remainings = remainings - NEW.quantity WHERE store.goods_goodsid = NEW.store_goods_goodsid AND store.saller_account = NEW.store_saller_account;
    END IF;
END $
DELIMITER ;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
